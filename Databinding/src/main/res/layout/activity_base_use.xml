<?xml version="1.0" encoding="utf-8"?><!--在正常的布局外，用layout标签包裹-->
<layout xmlns:tools="http://schemas.android.com/tools">
    <!--用于xml布局中binding数据的一些变量，类的声明引用-->
    <data>
        <!--变量声明 ，使用variable 需要在代码中初始化和赋值。 基础数据类型的使用-->
        <variable
            name="title"
            type="String" />

        <variable
            name="name"
            type="String" />
        <!--int类型可写作Integer-->
        <variable
            name="age"
            type="int" />

        <variable
            name="isStudent"
            type="Boolean" />
        <!--List和Map类型，在xml中，个别字符需要转义符号-->
        <variable
            name="ages"
            type="List&lt;String>" />

        <variable
            name="map"
            type="Map&lt;Integer,String>" />
        <!--用于演示静态引用点击-->
        <variable
            name="helper"
            type="BindHelp" />

        <!--导入xml中需要的类，不导入的话，使用就会报错-->
        <import type="android.view.View" />

        <import type="java.util.List" />

        <import type="java.util.Map" />

        <import type="com.zzq.my.jetpacks.tools.BindTool" />

        <import type="com.zzq.my.jetpacks.tools.BindUtilKt" />
        <!--可使使用alias 命名别名，就可以在xml内部应用时候使用别名，优化书写和区分-->
        <import
            alias="BU"
            type="com.zzq.my.jetpacks.tools.BindUtil" />

        <import type="com.zzq.my.jetpacks.tools.BindHelp" />
        <!--xml 与data 数据进行绑定 @{}  @={}（双向绑定）
        1 可以用表达是，函数调用，属性参数
        2 ?? 判空
        3 ?:三元运算符
        4 @string/str_reference 资源引用 当中可以用format 占位符
        5 拼接字符串的是使用反引号 如： `拼接的字符串`
        6 default 设置默认值
        7 include 绑定
        8 点击事件设置
        {
        onclick = @{()->vm.click()}
        onclick = @{()->vm.click(context)}
        onclick = @{(v)->vm.click(v)}
        onclick = @{BindHelp::startClick}
        onclick = @{callback}
        }
        -->
    </data>
    <!--UI layout-->
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:bind="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        android:padding="10dp">

        <!--1、普通的应用变量：title， 使用tools命名空间的属性，便于预览效果
          todo 注意text不能为Int值，否则报错。int要转为string,使用拼接，或者valueOf，toString都可以。-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{age+` years old`}"
            tools:text="title text" />

        <!--2、使用资源引用(不只是string，可以color，drawable等其他需要的。)：在@{}里面写@string的时候，不会自动提示和补全，所以切记别写错了，否则编译错误，排查问题都不容易-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{@string/str_reference}"
            tools:text="str引用" />

        <!--3、默认值的使用：default用,分号分隔，只是用于预览作用，运行时无效。
			可以使用``反引号；也可以@string引用资源；也可使用其他变量或者静态函数值-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{name , default=`默认Name`}" />

        <!--4、判空null，并设置默认值，使用?? 若空则显示默认值。
			 todo 注意，``反引号内尽量避免中文，因为编码会显示乱码，或者运行时可能报错。
			 todo 用``地方都可 用@string或这其他变量值，静态函数值 替换。
			 ??后可用``，@string/str_reference,或者其他变量或静态函数值。如：
			android:text="@{title ?? @string/str_reference}"
			 -->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{title ?? ` null of  title`}" />

        <!--5、使用string的format-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{@string/str_format(`zhuangzeqin`)}"
            tools:text="str的格式化" />

        <!--6、字符拼接 这种写法，如果是中文，就可能编译报错，无奈-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text="@{`Pre_`+@string/str_reference+title}"
            tools:text="str的拼接" />

        <!--7、根据boolean类型，控制显示隐藏（也可用于其他判断）
            todo 注意这里也能用default，用于预览，但是值就要写成未使用binding时候的默认string值的写法。如这里的gone-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="是学生就显示"
            android:textColor="@android:color/holo_green_light"
            android:visibility="@{isStudent? View.VISIBLE:View.GONE,default=`gone`}" />

        <!--复数，与自然语言相关，特别是不同国家的语言对应不同的单复数。目前没有业务场景使用到，未做研究-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="5dp"
            android:text="@{@plurals/str_numbers(5)}"
            tools:text="str的格式化" />
        <!--1、转换，也就是将原有不支持的属性，转换为支持，兼容，如background的属性不能设置普通string，
                这里可以通过@BindingConversion的静态函数，来适配-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="5dp"
            android:background="@{`red`}"
            android:textColor="@{`white`}"
            android:text="这个文案的背景色属性，就是通过converters转换才行的"
            />

        todo 注意text不能为Int值，否则报错。int要转为string,使用拼接，或者valueOf，toString都可以。-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="2dp"
            android:text='@{age>30? "老腊肉":"小鲜肉" }'
            tools:text="title text" />


        <androidx.appcompat.widget.AppCompatImageView
            bind:imgSrc='@{"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.pngaaa"}'
            bind:placeholder='@{@drawable/img_banner}'
            android:id="@+id/iv_image_advance"
            android:layout_width="wrap_content"
            android:layout_height="50dp"
           />

        <!--8、使用静态函数值,分别是java方式，kotlin的两种方式-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{BindTool.nameAge(name,age)}"
            android:textColor="@android:color/holo_blue_light"
            tools:text="静态函数" />

        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{BindUtilKt.ageName(age,name)}"
            android:textColor="@{isStudent?@android:color/holo_blue_light:@android:color/holo_purple}"
            tools:text="Kt静态函数" />

        <!--注意这里BU是上面定义的BindUtil的别名-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{BU.ageAge(age)+BindHelp.nameName(name)}"
            android:textColor="@android:color/holo_purple"
            tools:text="Kt object 静态函数" />


        <!--9、List和Map-->
        <androidx.appcompat.widget.AppCompatTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{ages[0]+map[20]}"
            android:textColor="@android:color/holo_purple"
            tools:text="list和map" />


        <!--10、函数调用。点击按钮事件的响应，在onclick函数中，有多种写法（todo 其实这也是binding在xml中函数调用的一种写法。只不过这里函数是click而已）-->
        <androidx.appcompat.widget.AppCompatButton
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:background="@color/design_default_color_primary"
            android:onClick="@{()->BindTool.log()}"
            android:text="普通无参(看logcat)"
            android:textColor="@color/design_default_color_surface" />

        <androidx.appcompat.widget.AppCompatButton
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:background="@color/design_default_color_primary"
            android:onClick="@{(v)->BindTool.toast(v)}"
            android:text="普通view参数"
            android:textColor="@color/design_default_color_surface" />

        <androidx.appcompat.widget.AppCompatButton
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:background="@color/design_default_color_primary"
            android:onClick="@{()->BindUtilKt.toastV(context)}"
            android:text="context参数"
            android:textColor="@color/design_default_color_surface" />

        <androidx.appcompat.widget.AppCompatButton
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:background="@color/design_default_color_primary"
            android:onClick="@{BindHelp::staticClick}"
            android:text="静态函数应用点击"
            android:textColor="@color/design_default_color_surface" />

    </LinearLayout>
</layout>

